input {
  kafka {
        bootstrap_servers => "kafka1:29092,kafka2:29093,kafka3:29094"
        topics => ["${KAFKA_TOPIC_PROCESSED_DATA:Emotibit_processdata}"]
        group_id => "logstash-processdata"
        auto_offset_reset => "latest"
        codec => "json"
        consumer_threads => 4
        max_poll_records => 1
    }
}

filter {
  # Extract document fields from nested structure
  ruby {
    code => '
      doc = event.get("doc")
      if doc.is_a?(Hash)
        doc.each { |k, v| event.set(k, v) }
        event.remove("doc")
      end
    '
  }
  
  # Convert timestamp first to avoid duplication
  date {
    match => [ "timestamp", "UNIX" ]
    target => "@timestamp"
  }
  
  # Create clones for each sensor metric
  clone {
    clones => [
      "press_event", "co2_event", "hum_event", "voc_event", "iaq_event",
      "lux_event", "irRatio_event", "battery_event", "acceleration_event",
      "IndicateurTremblement_event", "fall_detected_event", "skt_event",
      "wearing_status_event", "oxygen_event", "bpm_event", "ibi_event",
      "sdnn_event", "rmssd_event", "pnn50_event", "breathingrate_event",
      "eda_tonic_event", "eda_phasic_event", "scr_amplitude_event"
    ]
  }

  # Temperature processing (original event)
  if ![cloned] {
    if [temp] {
      mutate {
        add_field => { 
          "metric_name" => "temp"
          "metric_value" => "%{temp}"
          "metric_unit" => "celsius"
          "sensor_type" => "temperature"
          "category" => "environmental"
        }
        convert => { "metric_value" => "float" }
      }
    } else {
      drop { }
    }
  }

  # Pressure processing
  if "press_event" in [tags] {
    if [press] {
      mutate {
        replace => { 
          "metric_name" => "press"
          "metric_value" => "%{press}"
          "metric_unit" => "hPa"
          "sensor_type" => "pressure"
          "category" => "environmental"
        }
        convert => { "metric_value" => "float" }
      }
    } else {
      drop { }
    }
  }

  # CO2 processing
  if "co2_event" in [tags] {
    if [co2] {
      mutate {
        replace => { 
          "metric_name" => "co2"
          "metric_value" => "%{co2}"
          "metric_unit" => "ppm"
          "sensor_type" => "air_quality"
          "category" => "environmental"
        }
        convert => { "metric_value" => "float" }
      }
    } else {
      drop { }
    }
  }

  # Humidity processing
  if "hum_event" in [tags] {
    if [hum] {
      mutate {
        replace => { 
          "metric_name" => "hum"
          "metric_value" => "%{hum}"
          "metric_unit" => "percent"
          "sensor_type" => "humidity"
          "category" => "environmental"
        }
        convert => { "metric_value" => "float" }
      }
    } else {
      drop { }
    }
  }

  # VOC processing
  if "voc_event" in [tags] {
    if [voc] {
      mutate {
        replace => { 
          "metric_name" => "voc"
          "metric_value" => "%{voc}"
          "metric_unit" => "index"
          "sensor_type" => "air_quality"
          "category" => "environmental"
        }
        convert => { "metric_value" => "float" }
      }
    } else {
      drop { }
    }
  }

  # IAQ processing
  if "iaq_event" in [tags] {
    if [iaq] {
      mutate {
        replace => { 
          "metric_name" => "iaq"
          "metric_value" => "%{iaq}"
          "metric_unit" => "index"
          "sensor_type" => "air_quality"
          "category" => "environmental"
        }
        convert => { "metric_value" => "float" }
      }
    } else {
      drop { }
    }
  }

  # Light level processing
  if "lux_event" in [tags] {
    if [lux] {
      mutate {
        replace => { 
          "metric_name" => "lux"
          "metric_value" => "%{lux}"
          "metric_unit" => "lux"
          "sensor_type" => "light"
          "category" => "environmental"
        }
        convert => { "metric_value" => "float" }
      }
    } else {
      drop { }
    }
  }

  # IR Ratio processing
  if "irRatio_event" in [tags] {
    if [irRatio] {
      mutate {
        replace => { 
          "metric_name" => "irRatio"
          "metric_value" => "%{irRatio}"
          "metric_unit" => "ratio"
          "sensor_type" => "light"
          "category" => "environmental"
        }
        convert => { "metric_value" => "float" }
      }
    } else {
      drop { }
    }
  }

  # Battery level processing
  if "battery_event" in [tags] {
    if [battery] {
      mutate {
        replace => { 
          "metric_name" => "battery"
          "metric_value" => "%{battery}"
          "metric_unit" => "percent"
          "sensor_type" => "power"
          "category" => "system"
        }
        convert => { "metric_value" => "float" }
      }
    } else {
      drop { }
    }
  }

  # Acceleration processing
  if "acceleration_event" in [tags] {
    if [acceleration] {
      mutate {
        replace => { 
          "metric_name" => "acceleration"
          "metric_value" => "%{acceleration}"
          "metric_unit" => "g"
          "sensor_type" => "motion"
          "category" => "movement"
        }
        convert => { "metric_value" => "float" }
      }
    } else {
      drop { }
    }
  }

  # Tremor indicator processing
  if "IndicateurTremblement_event" in [tags] {
    if [IndicateurTremblement] {
      mutate {
        replace => { 
          "metric_name" => "IndicateurTremblement"
          "metric_value" => "%{IndicateurTremblement}"
          "metric_unit" => "index"
          "sensor_type" => "tremor"
          "category" => "movement"
        }
        convert => { "metric_value" => "float" }
      }
    } else {
      drop { }
    }
  }

  # Fall detection processing
  if "fall_detected_event" in [tags] {
    if [fall_detected] or [fall_detected] == 0 {
      mutate {
        replace => { 
          "metric_name" => "fall_detected"
          "metric_value" => "%{fall_detected}"
          "metric_unit" => "boolean"
          "sensor_type" => "fall_detection"
          "category" => "safety"
        }
        convert => { "metric_value" => "integer" }
      }
    } else {
      drop { }
    }
  }

  # Skin temperature processing
  if "skt_event" in [tags] {
    if [skt] {
      mutate {
        replace => { 
          "metric_name" => "skt"
          "metric_value" => "%{skt}"
          "metric_unit" => "celsius"
          "sensor_type" => "temperature"
          "category" => "biometric"
        }
        convert => { "metric_value" => "float" }
      }
    } else {
      drop { }
    }
  }

  # Wearing status processing
  if "wearing_status_event" in [tags] {
    if [wearing_status_numeric] or [wearing_status_numeric] == 0 {
      mutate {
        replace => { 
          "metric_name" => "wearing_status"
          "metric_value" => "%{wearing_status_numeric}"
          "metric_unit" => "boolean"
          "sensor_type" => "wearing_status"
          "category" => "system"
        }
        convert => { "metric_value" => "integer" }
      }
    } else {
      drop { }
    }
  }

  # Oxygen saturation processing
  if "oxygen_event" in [tags] {
    if [oxygen] {
      mutate {
        replace => { 
          "metric_name" => "oxygen"
          "metric_value" => "%{oxygen}"
          "metric_unit" => "percent"
          "sensor_type" => "pulse_oximetry"
          "category" => "vital_signs"
        }
        convert => { "metric_value" => "float" }
      }
    } else {
      drop { }
    }
  }

  # Heart rate processing
  if "bpm_event" in [tags] {
    if [bpm] {
      mutate {
        replace => { 
          "metric_name" => "bpm"
          "metric_value" => "%{bpm}"
          "metric_unit" => "bpm"
          "sensor_type" => "heart_rate"
          "category" => "vital_signs"
        }
        convert => { "metric_value" => "integer" }
      }
    } else {
      drop { }
    }
  }

  # Inter-beat interval processing
  if "ibi_event" in [tags] {
    if [ibi] {
      mutate {
        replace => { 
          "metric_name" => "ibi"
          "metric_value" => "%{ibi}"
          "metric_unit" => "ms"
          "sensor_type" => "heart_rate_variability"
          "category" => "vital_signs"
        }
        convert => { "metric_value" => "float" }
      }
    } else {
      drop { }
    }
  }

  # SDNN processing
  if "sdnn_event" in [tags] {
    if [sdnn] {
      mutate {
        replace => { 
          "metric_name" => "sdnn"
          "metric_value" => "%{sdnn}"
          "metric_unit" => "ms"
          "sensor_type" => "heart_rate_variability"
          "category" => "vital_signs"
        }
        convert => { "metric_value" => "float" }
      }
    } else {
      drop { }
    }
  }

  # RMSSD processing
  if "rmssd_event" in [tags] {
    if [rmssd] {
      mutate {
        replace => { 
          "metric_name" => "rmssd"
          "metric_value" => "%{rmssd}"
          "metric_unit" => "ms"
          "sensor_type" => "heart_rate_variability"
          "category" => "vital_signs"
        }
        convert => { "metric_value" => "float" }
      }
    } else {
      drop { }
    }
  }

  # PNN50 processing
  if "pnn50_event" in [tags] {
    if [pnn50] {
      mutate {
        replace => { 
          "metric_name" => "pnn50"
          "metric_value" => "%{pnn50}"
          "metric_unit" => "percent"
          "sensor_type" => "heart_rate_variability"
          "category" => "vital_signs"
        }
        convert => { "metric_value" => "float" }
      }
    } else {
      drop { }
    }
  }

  # Breathing rate processing
  if "breathingrate_event" in [tags] {
    if [breathingrate] {
      mutate {
        replace => { 
          "metric_name" => "breathingrate"
          "metric_value" => "%{breathingrate}"
          "metric_unit" => "rpm"
          "sensor_type" => "respiratory"
          "category" => "vital_signs"
        }
        convert => { "metric_value" => "float" }
      }
    } else {
      drop { }
    }
  }

  # EDA tonic mean processing
  if "eda_tonic_event" in [tags] {
    if [eda_tonic_mean] {
      mutate {
        replace => { 
          "metric_name" => "eda_tonic_mean"
          "metric_value" => "%{eda_tonic_mean}"
          "metric_unit" => "microsiemens"
          "sensor_type" => "eda"
          "category" => "biometric"
        }
        convert => { "metric_value" => "float" }
      }
    } else {
      drop { }
    }
  }

  # EDA phasic mean processing
  if "eda_phasic_event" in [tags] {
    if [eda_phasic_mean] {
      mutate {
        replace => { 
          "metric_name" => "eda_phasic_mean"
          "metric_value" => "%{eda_phasic_mean}"
          "metric_unit" => "microsiemens"
          "sensor_type" => "eda"
          "category" => "biometric"
        }
        convert => { "metric_value" => "float" }
      }
    } else {
      drop { }
    }
  }

  # SCR amplitude mean processing
  if "scr_amplitude_event" in [tags] {
    if [scr_amplitude_mean] {
      mutate {
        replace => { 
          "metric_name" => "scr_amplitude_mean"
          "metric_value" => "%{scr_amplitude_mean}"
          "metric_unit" => "microsiemens"
          "sensor_type" => "eda"
          "category" => "biometric"
        }
        convert => { "metric_value" => "float" }
      }
    } else {
      drop { }
    }
  }

  # Clean up original sensor fields
  mutate {
    remove_field => [
      "temp", "press", "co2", "hum", "voc", "iaq", "lux", "irRatio", 
      "battery", "acceleration", "IndicateurTremblement", "fall_detected", 
      "skt", "wearing_status_numeric", "oxygen", "bpm", "ibi", "sdnn", 
      "rmssd", "pnn50", "breathingrate", "eda_tonic_mean", "eda_phasic_mean", 
      "scr_amplitude_mean", "tags", "timestamp"
    ]
  }
}


output {
    elasticsearch {
      hosts => ["${ELASTICSEARCH_HOST:https://your-elasticsearch.example.com}"]
      index => "${ELASTICSEARCH_INDEX_PREFIX:sensor-data}-%{+YYYY.MM}"
      user => "${ELASTICSEARCH_USER:elastic}"        # Optional: if you use security
      password => "${ELASTICSEARCH_PASSWORD:}"   # Optional: if you use security
      ssl_enabled => true
      ssl_certificate_verification => true
    }

    stdout {
      codec => line {
        format => "📊 Indexed processed data for patient %{patient_id}"
      }
    }
  
}